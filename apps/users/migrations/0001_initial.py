# Generated by Django 4.0.8 on 2023-02-02 22:41

import apps.base.clone
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import storages.backends.gcloud


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ApprovedWaitlistEmail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
            ],
            options={
                'ordering': ('-updated',),
                'abstract': False,
            },
            bases=(apps.base.clone.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ApprovedWaitlistEmailBatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('data', models.FileField(upload_to='cypress/approved_waitlist_batch')),
                ('success', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('-updated',),
                'abstract': False,
            },
            bases=(apps.base.clone.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.FileField(blank=True, null=True, storage=storages.backends.gcloud.GoogleCloudStorage(bucket_name='gyana-local-public', cache_control='public, max-age=31536000', querystring_auth=False), upload_to='profile-pictures/')),
                ('onboarded', models.BooleanField(default=False)),
                ('company_industry', models.CharField(choices=[('', 'Select...'), ('agency', 'Agency'), ('software', 'Software'), ('ecommerce', 'E-commerce'), ('consulting', 'Consulting'), ('education', 'Education'), ('fintech', 'Fintech'), ('nonprofit', 'Nonprofit'), ('other', 'Other')], max_length=16, null=True)),
                ('company_role', models.CharField(choices=[('', 'Select...'), ('leadership', 'Leadership'), ('marketing', 'Marketing'), ('business analyst', 'Business Analyst'), ('data scientist', 'Data Scientist'), ('product manager', 'Product Manager'), ('developer', 'Developer'), ('student', 'Student'), ('sales', 'Sales'), ('other', 'Other')], max_length=32, null=True)),
                ('company_size', models.CharField(choices=[('', 'Select...'), ('1', 'Just me'), ('2-10', '2-10'), ('11-50', '11-50'), ('51-200', '51-200'), ('201-1000', '201-1000'), ('more than 1000', 'More than 1000')], max_length=16, null=True)),
                ('source_channel', models.CharField(choices=[('', 'Select...'), ('onlineads', 'Online ad'), ('searchengine', 'Search engine'), ('socialmedia', 'Social media'), ('wordofmouth', 'Recommended by someone'), ('blog', 'Blog or publication'), ('producthunt', 'Product Hunt '), ('other', 'Other')], max_length=32, null=True)),
                ('marketing_allowed', models.BooleanField(null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
