# Generated by Django 4.0.8 on 2023-02-02 22:41

import apps.base.clone
import dirtyfields.dirtyfields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Edge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('position', models.IntegerField(default=0)),
            ],
            options={
                'ordering': ('position',),
            },
            bases=(apps.base.clone.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=64, null=True)),
                ('kind', models.CharField(choices=[('add', 'Add'), ('aggregation', 'Group and Aggregate'), ('convert', 'Convert'), ('distinct', 'Distinct'), ('edit', 'Edit'), ('filter', 'Filter'), ('input', 'Get data'), ('formula', 'Formula'), ('intersect', 'Intersect '), ('join', 'Join'), ('limit', 'Limit'), ('pivot', 'Pivot'), ('output', 'Save data'), ('rename', 'Rename'), ('select', 'Select columns'), ('sort', 'Sort'), ('union', 'Union'), ('except', 'Except'), ('unpivot', 'Unpivot'), ('text', 'Text'), ('window', 'Window and Calculate'), ('sentiment', 'Sentiment')], max_length=16)),
                ('x', models.FloatField()),
                ('y', models.FloatField()),
                ('data_updated', models.DateTimeField(editable=False, null=True)),
                ('error', models.CharField(max_length=300, null=True)),
                ('select_mode', models.CharField(choices=[('keep', 'keep'), ('exclude', 'exclude')], default='keep', help_text='Either keep or exclude the selected columns', max_length=8)),
                ('union_distinct', models.BooleanField(default=False, help_text='Ignore common rows if selected')),
                ('limit_limit', models.IntegerField(default=100, help_text='Limits rows to selected number')),
                ('limit_offset', models.IntegerField(blank=True, help_text='From where to start the limit', null=True)),
                ('text_text', models.TextField(null=True)),
                ('pivot_index', models.CharField(blank=True, help_text='Which column to keep as index', max_length=300, null=True)),
                ('pivot_column', models.CharField(blank=True, help_text='The column whose values create the new column names', max_length=300, null=True)),
                ('pivot_value', models.CharField(blank=True, help_text='The column containing the values for the new pivot cells', max_length=300, null=True)),
                ('pivot_aggregation', models.CharField(blank=True, choices=[('sum', 'Sum'), ('count', 'Count'), ('nunique', 'Count distinct'), ('mean', 'Average'), ('max', 'Maximum'), ('min', 'Minimum'), ('std', 'Standard deviation')], help_text='Select an aggregation to be applied to the new cells', max_length=20, null=True)),
                ('unpivot_value', models.CharField(blank=True, help_text='Name of the new value column', max_length=300, null=True)),
                ('unpivot_column', models.CharField(blank=True, help_text='Name of the new category column', max_length=300, null=True)),
                ('sentiment_column', models.CharField(blank=True, help_text='Select the text column to get the sentiment of.', max_length=300, null=True)),
                ('always_use_credits', models.BooleanField(default=False)),
                ('uses_credits', models.IntegerField(default=0)),
                ('credit_use_confirmed', models.DateTimeField(editable=False, null=True)),
                ('has_been_saved', models.BooleanField(default=False)),
            ],
            options={
                'ordering': (),
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, apps.base.clone.CloneMixin, models.Model),
        ),
    ]
