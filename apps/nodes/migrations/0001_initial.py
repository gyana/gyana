# Generated by Django 3.2 on 2021-07-13 22:33

import dirtyfields.dirtyfields
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models
from model_clone import CloneMixin


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("workflows", "0042_auto_20210713_2142"),
        ("tables", "0006_auto_20210625_0951"),
    ]

    operations = [
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.CreateModel(
                    name="Node",
                    fields=[
                        (
                            "id",
                            models.AutoField(
                                auto_created=True,
                                primary_key=True,
                                serialize=False,
                                verbose_name="ID",
                            ),
                        ),
                        ("created", models.DateTimeField(auto_now_add=True)),
                        ("updated", models.DateTimeField(auto_now=True)),
                        (
                            "name",
                            models.CharField(blank=True, max_length=64, null=True),
                        ),
                        (
                            "kind",
                            models.CharField(
                                choices=[
                                    ("input", "Get data"),
                                    ("output", "Save data"),
                                    ("select", "Select"),
                                    ("join", "Join"),
                                    ("aggregation", "Aggregation"),
                                    ("union", "Union"),
                                    ("sort", "Sort"),
                                    ("limit", "Limit"),
                                    ("filter", "Filter"),
                                    ("edit", "Edit"),
                                    ("add", "Add"),
                                    ("rename", "Rename"),
                                    ("text", "Text"),
                                    ("formula", "Formula"),
                                    ("distinct", "Distinct"),
                                    ("pivot", "Pivot"),
                                    ("unpivot", "Unpivot"),
                                    ("intersect", "Intersection"),
                                    ("window", "Window"),
                                ],
                                max_length=16,
                            ),
                        ),
                        ("x", models.FloatField()),
                        ("y", models.FloatField()),
                        (
                            "data_updated",
                            models.DateTimeField(editable=False, null=True),
                        ),
                        ("error", models.CharField(max_length=300, null=True)),
                        (
                            "output_name",
                            models.CharField(
                                help_text="Name your output, this name will be refered to in other workflows or dashboards.",
                                max_length=100,
                                null=True,
                            ),
                        ),
                        (
                            "select_mode",
                            models.CharField(
                                choices=[("keep", "keep"), ("exclude", "exclude")],
                                default="keep",
                                help_text="Either keep or exclude the selected columns",
                                max_length=8,
                            ),
                        ),
                        (
                            "join_how",
                            models.CharField(
                                choices=[
                                    ("inner", "Inner"),
                                    ("outer", "Outer"),
                                    ("left", "Left"),
                                    ("right", "Right"),
                                ],
                                default="inner",
                                help_text="Select the join method, more information in the docs",
                                max_length=12,
                            ),
                        ),
                        (
                            "join_left",
                            models.CharField(
                                blank=True,
                                help_text="The column from the first parent you want to join on.",
                                max_length=300,
                                null=True,
                            ),
                        ),
                        (
                            "join_right",
                            models.CharField(
                                blank=True,
                                help_text="The column from the second parent you want to join on.",
                                max_length=300,
                                null=True,
                            ),
                        ),
                        (
                            "union_mode",
                            models.CharField(
                                choices=[("keep", "keep"), ("exclude", "exclude")],
                                default="except",
                                help_text="Either keep or exclude the common rows",
                                max_length=8,
                            ),
                        ),
                        (
                            "union_distinct",
                            models.BooleanField(
                                default=False,
                                help_text="Ignore common rows if selected",
                            ),
                        ),
                        (
                            "limit_limit",
                            models.IntegerField(
                                default=100, help_text="Limits rows to selected number"
                            ),
                        ),
                        (
                            "limit_offset",
                            models.IntegerField(
                                help_text="From where to start the limit", null=True
                            ),
                        ),
                        ("text_text", models.TextField(null=True)),
                        (
                            "pivot_index",
                            models.CharField(
                                blank=True,
                                help_text="Which column to keep as index",
                                max_length=300,
                                null=True,
                            ),
                        ),
                        (
                            "pivot_column",
                            models.CharField(
                                blank=True,
                                help_text="The column whose values create the new column names",
                                max_length=300,
                                null=True,
                            ),
                        ),
                        (
                            "pivot_value",
                            models.CharField(
                                blank=True,
                                help_text="The column containing the values for the new pivot cells",
                                max_length=300,
                                null=True,
                            ),
                        ),
                        (
                            "pivot_aggregation",
                            models.CharField(
                                blank=True,
                                choices=[
                                    ("sum", "Sum"),
                                    ("count", "Count"),
                                    ("mean", "Average"),
                                    ("max", "Maximum"),
                                    ("min", "Minimum"),
                                    ("std", "Standard deviation"),
                                ],
                                help_text="Select an aggregation to be applied to the new cells",
                                max_length=20,
                                null=True,
                            ),
                        ),
                        (
                            "unpivot_value",
                            models.CharField(
                                blank=True,
                                help_text="Name of the new value column",
                                max_length=300,
                                null=True,
                            ),
                        ),
                        (
                            "unpivot_column",
                            models.CharField(
                                blank=True,
                                help_text="Name of the new category column",
                                max_length=300,
                                null=True,
                            ),
                        ),
                        (
                            "input_table",
                            models.ForeignKey(
                                help_text="Select a data source",
                                null=True,
                                on_delete=django.db.models.deletion.CASCADE,
                                to="tables.table",
                            ),
                        ),
                        (
                            "intermediate_table",
                            models.ForeignKey(
                                null=True,
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="intermediate_table",
                                to="tables.table",
                            ),
                        ),
                        (
                            "parents",
                            models.ManyToManyField(
                                blank=True, related_name="children", to="nodes.Node"
                            ),
                        ),
                        (
                            "workflow",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="nodes",
                                to="workflows.workflow",
                            ),
                        ),
                    ],
                    options={
                        "ordering": ("-created",),
                        "abstract": False,
                    },
                    bases=(
                        dirtyfields.dirtyfields.DirtyFieldsMixin,
                        CloneMixin,
                        models.Model,
                    ),
                )
            ],
            # Table already exists. See catalog/migrations/0003_delete_product.py
            database_operations=[],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.CreateModel(
                    name="WindowColumn",
                    fields=[
                        (
                            "id",
                            models.AutoField(
                                auto_created=True,
                                primary_key=True,
                                serialize=False,
                                verbose_name="ID",
                            ),
                        ),
                        ("created", models.DateTimeField(auto_now_add=True)),
                        ("updated", models.DateTimeField(auto_now=True)),
                        ("column", models.CharField(max_length=300)),
                        (
                            "function",
                            models.CharField(
                                choices=[
                                    ("sum", "Sum"),
                                    ("count", "Count"),
                                    ("mean", "Average"),
                                    ("max", "Maximum"),
                                    ("min", "Minimum"),
                                    ("std", "Standard deviation"),
                                ],
                                max_length=20,
                            ),
                        ),
                        (
                            "group_by",
                            models.CharField(blank=True, max_length=300, null=True),
                        ),
                        (
                            "order_by",
                            models.CharField(blank=True, max_length=300, null=True),
                        ),
                        (
                            "ascending",
                            models.BooleanField(
                                default=True, help_text="Select to sort ascendingly"
                            ),
                        ),
                        (
                            "label",
                            models.CharField(
                                max_length=300,
                                validators=[
                                    django.core.validators.RegexValidator(
                                        "^[a-zA-Z_][0-9a-zA-Z_]*$",
                                        "Only numbers, letters and underscores allowed.",
                                    )
                                ],
                            ),
                        ),
                        (
                            "node",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="window_columns",
                                to="nodes.node",
                            ),
                        ),
                    ],
                    options={
                        "abstract": False,
                    },
                    bases=(
                        dirtyfields.dirtyfields.DirtyFieldsMixin,
                        CloneMixin,
                        models.Model,
                    ),
                )
            ],
            # Table already exists. See catalog/migrations/0003_delete_product.py
            database_operations=[],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.CreateModel(
                    name="SortColumn",
                    fields=[
                        (
                            "id",
                            models.AutoField(
                                auto_created=True,
                                primary_key=True,
                                serialize=False,
                                verbose_name="ID",
                            ),
                        ),
                        ("created", models.DateTimeField(auto_now_add=True)),
                        ("updated", models.DateTimeField(auto_now=True)),
                        (
                            "ascending",
                            models.BooleanField(
                                default=True, help_text="Select to sort ascendingly"
                            ),
                        ),
                        (
                            "column",
                            models.CharField(
                                help_text="Select column to sort on", max_length=300
                            ),
                        ),
                        (
                            "node",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="sort_columns",
                                to="nodes.node",
                            ),
                        ),
                    ],
                    options={
                        "abstract": False,
                    },
                    bases=(
                        dirtyfields.dirtyfields.DirtyFieldsMixin,
                        CloneMixin,
                        models.Model,
                    ),
                )
            ],
            # Table already exists. See catalog/migrations/0003_delete_product.py
            database_operations=[],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.CreateModel(
                    name="SecondaryColumn",
                    fields=[
                        (
                            "id",
                            models.AutoField(
                                auto_created=True,
                                primary_key=True,
                                serialize=False,
                                verbose_name="ID",
                            ),
                        ),
                        ("created", models.DateTimeField(auto_now_add=True)),
                        ("updated", models.DateTimeField(auto_now=True)),
                        ("column", models.CharField(max_length=300)),
                        (
                            "node",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="secondary_columns",
                                to="nodes.node",
                            ),
                        ),
                    ],
                    options={
                        "abstract": False,
                    },
                    bases=(
                        dirtyfields.dirtyfields.DirtyFieldsMixin,
                        CloneMixin,
                        models.Model,
                    ),
                )
            ],
            # Table already exists. See catalog/migrations/0003_delete_product.py
            database_operations=[],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.CreateModel(
                    name="RenameColumn",
                    fields=[
                        (
                            "id",
                            models.AutoField(
                                auto_created=True,
                                primary_key=True,
                                serialize=False,
                                verbose_name="ID",
                            ),
                        ),
                        ("created", models.DateTimeField(auto_now_add=True)),
                        ("updated", models.DateTimeField(auto_now=True)),
                        ("column", models.CharField(max_length=300)),
                        (
                            "new_name",
                            models.CharField(
                                max_length=300,
                                validators=[
                                    django.core.validators.RegexValidator(
                                        "^[a-zA-Z_][0-9a-zA-Z_]*$",
                                        "Only numbers, letters and underscores allowed.",
                                    )
                                ],
                            ),
                        ),
                        (
                            "node",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="rename_columns",
                                to="nodes.node",
                            ),
                        ),
                    ],
                    options={
                        "abstract": False,
                    },
                    bases=(
                        dirtyfields.dirtyfields.DirtyFieldsMixin,
                        CloneMixin,
                        models.Model,
                    ),
                )
            ],
            # Table already exists. See catalog/migrations/0003_delete_product.py
            database_operations=[],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.CreateModel(
                    name="FunctionColumn",
                    fields=[
                        (
                            "id",
                            models.AutoField(
                                auto_created=True,
                                primary_key=True,
                                serialize=False,
                                verbose_name="ID",
                            ),
                        ),
                        ("created", models.DateTimeField(auto_now_add=True)),
                        ("updated", models.DateTimeField(auto_now=True)),
                        ("column", models.CharField(max_length=300)),
                        (
                            "function",
                            models.CharField(
                                choices=[
                                    ("sum", "Sum"),
                                    ("count", "Count"),
                                    ("mean", "Average"),
                                    ("max", "Maximum"),
                                    ("min", "Minimum"),
                                    ("std", "Standard deviation"),
                                ],
                                max_length=20,
                            ),
                        ),
                        (
                            "node",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="aggregations",
                                to="nodes.node",
                            ),
                        ),
                    ],
                    options={
                        "abstract": False,
                    },
                    bases=(
                        dirtyfields.dirtyfields.DirtyFieldsMixin,
                        CloneMixin,
                        models.Model,
                    ),
                )
            ],
            # Table already exists. See catalog/migrations/0003_delete_product.py
            database_operations=[],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.CreateModel(
                    name="FormulaColumn",
                    fields=[
                        (
                            "id",
                            models.AutoField(
                                auto_created=True,
                                primary_key=True,
                                serialize=False,
                                verbose_name="ID",
                            ),
                        ),
                        ("created", models.DateTimeField(auto_now_add=True)),
                        ("updated", models.DateTimeField(auto_now=True)),
                        ("formula", models.TextField(blank=True, null=True)),
                        (
                            "label",
                            models.CharField(
                                max_length=300,
                                validators=[
                                    django.core.validators.RegexValidator(
                                        "^[a-zA-Z_][0-9a-zA-Z_]*$",
                                        "Only numbers, letters and underscores allowed.",
                                    )
                                ],
                            ),
                        ),
                        (
                            "node",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="formula_columns",
                                to="nodes.node",
                            ),
                        ),
                    ],
                    options={
                        "abstract": False,
                    },
                    bases=(
                        dirtyfields.dirtyfields.DirtyFieldsMixin,
                        CloneMixin,
                        models.Model,
                    ),
                )
            ],
            # Table already exists. See catalog/migrations/0003_delete_product.py
            database_operations=[],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.CreateModel(
                    name="EditColumn",
                    fields=[
                        (
                            "id",
                            models.AutoField(
                                auto_created=True,
                                primary_key=True,
                                serialize=False,
                                verbose_name="ID",
                            ),
                        ),
                        ("created", models.DateTimeField(auto_now_add=True)),
                        ("updated", models.DateTimeField(auto_now=True)),
                        ("column", models.CharField(max_length=300)),
                        (
                            "string_function",
                            models.CharField(
                                choices=[
                                    ("isnull", "is empty"),
                                    ("notnull", "is not empty"),
                                    ("fillna", "fill empty values"),
                                    ("lower", "to lowercase"),
                                    ("upper", "to uppercase"),
                                    ("length", "length"),
                                    ("reverse", "reverse"),
                                    ("strip", "strip"),
                                    ("lstrip", "lstrip"),
                                    ("rstrip", "rstrip"),
                                    ("like", "like"),
                                    ("contains", "contains"),
                                    ("left", "left"),
                                    ("right", "right"),
                                    ("repeat", "repeat"),
                                ],
                                max_length=20,
                                null=True,
                            ),
                        ),
                        (
                            "integer_function",
                            models.CharField(
                                choices=[
                                    ("isnull", "is empty"),
                                    ("notnull", "is not empty"),
                                    ("fillna", "fill empty values"),
                                    ("cummax", "cummax"),
                                    ("cummin", "cummin"),
                                    ("abs", "absolute value"),
                                    ("sqrt", "square root"),
                                    ("ceil", "ceiling"),
                                    ("floor", "floor"),
                                    ("ln", "ln"),
                                    ("log2", "log2"),
                                    ("log10", "log10"),
                                    ("log", "log"),
                                    ("exp", "exponent"),
                                    ("add", "add"),
                                    ("sub", "subtract"),
                                    ("mul", "multiply"),
                                    ("div", "divide"),
                                ],
                                max_length=20,
                                null=True,
                            ),
                        ),
                        (
                            "date_function",
                            models.CharField(
                                choices=[
                                    ("isnull", "is empty"),
                                    ("notnull", "is not empty"),
                                    ("fillna", "fill empty values"),
                                    ("year", "year"),
                                    ("month", "month"),
                                    ("day", "day"),
                                ],
                                max_length=20,
                                null=True,
                            ),
                        ),
                        (
                            "time_function",
                            models.CharField(
                                choices=[
                                    ("isnull", "is empty"),
                                    ("notnull", "is not empty"),
                                    ("fillna", "fill empty values"),
                                    ("hour", "hour"),
                                    ("minute", "minute"),
                                    ("second", "second"),
                                    ("millisecond", "millisecond"),
                                ],
                                max_length=20,
                                null=True,
                            ),
                        ),
                        (
                            "datetime_function",
                            models.CharField(
                                choices=[
                                    ("isnull", "is empty"),
                                    ("notnull", "is not empty"),
                                    ("fillna", "fill empty values"),
                                    ("hour", "hour"),
                                    ("minute", "minute"),
                                    ("second", "second"),
                                    ("millisecond", "millisecond"),
                                    ("year", "year"),
                                    ("month", "month"),
                                    ("day", "day"),
                                    ("epoch_seconds", "epoch seconds"),
                                    ("time", "time"),
                                    ("date", "date"),
                                ],
                                max_length=20,
                                null=True,
                            ),
                        ),
                        (
                            "integer_value",
                            models.BigIntegerField(blank=True, null=True),
                        ),
                        ("float_value", models.FloatField(blank=True, null=True)),
                        ("string_value", models.TextField(blank=True, null=True)),
                        (
                            "node",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="edit_columns",
                                to="nodes.node",
                            ),
                        ),
                    ],
                    options={
                        "abstract": False,
                    },
                    bases=(
                        dirtyfields.dirtyfields.DirtyFieldsMixin,
                        CloneMixin,
                        models.Model,
                    ),
                )
            ],
            # Table already exists. See catalog/migrations/0003_delete_product.py
            database_operations=[],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.CreateModel(
                    name="Column",
                    fields=[
                        (
                            "id",
                            models.AutoField(
                                auto_created=True,
                                primary_key=True,
                                serialize=False,
                                verbose_name="ID",
                            ),
                        ),
                        ("created", models.DateTimeField(auto_now_add=True)),
                        ("updated", models.DateTimeField(auto_now=True)),
                        (
                            "column",
                            models.CharField(
                                help_text="Select columns", max_length=300
                            ),
                        ),
                        (
                            "node",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="columns",
                                to="nodes.node",
                            ),
                        ),
                    ],
                    options={
                        "abstract": False,
                    },
                    bases=(
                        dirtyfields.dirtyfields.DirtyFieldsMixin,
                        CloneMixin,
                        models.Model,
                    ),
                )
            ],
            # Table already exists. See catalog/migrations/0003_delete_product.py
            database_operations=[],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.CreateModel(
                    name="AddColumn",
                    fields=[
                        (
                            "id",
                            models.AutoField(
                                auto_created=True,
                                primary_key=True,
                                serialize=False,
                                verbose_name="ID",
                            ),
                        ),
                        ("created", models.DateTimeField(auto_now_add=True)),
                        ("updated", models.DateTimeField(auto_now=True)),
                        ("column", models.CharField(max_length=300)),
                        (
                            "string_function",
                            models.CharField(
                                choices=[
                                    ("isnull", "is empty"),
                                    ("notnull", "is not empty"),
                                    ("fillna", "fill empty values"),
                                    ("lower", "to lowercase"),
                                    ("upper", "to uppercase"),
                                    ("length", "length"),
                                    ("reverse", "reverse"),
                                    ("strip", "strip"),
                                    ("lstrip", "lstrip"),
                                    ("rstrip", "rstrip"),
                                    ("like", "like"),
                                    ("contains", "contains"),
                                    ("left", "left"),
                                    ("right", "right"),
                                    ("repeat", "repeat"),
                                ],
                                max_length=20,
                                null=True,
                            ),
                        ),
                        (
                            "integer_function",
                            models.CharField(
                                choices=[
                                    ("isnull", "is empty"),
                                    ("notnull", "is not empty"),
                                    ("fillna", "fill empty values"),
                                    ("cummax", "cummax"),
                                    ("cummin", "cummin"),
                                    ("abs", "absolute value"),
                                    ("sqrt", "square root"),
                                    ("ceil", "ceiling"),
                                    ("floor", "floor"),
                                    ("ln", "ln"),
                                    ("log2", "log2"),
                                    ("log10", "log10"),
                                    ("log", "log"),
                                    ("exp", "exponent"),
                                    ("add", "add"),
                                    ("sub", "subtract"),
                                    ("mul", "multiply"),
                                    ("div", "divide"),
                                ],
                                max_length=20,
                                null=True,
                            ),
                        ),
                        (
                            "date_function",
                            models.CharField(
                                choices=[
                                    ("isnull", "is empty"),
                                    ("notnull", "is not empty"),
                                    ("fillna", "fill empty values"),
                                    ("year", "year"),
                                    ("month", "month"),
                                    ("day", "day"),
                                ],
                                max_length=20,
                                null=True,
                            ),
                        ),
                        (
                            "time_function",
                            models.CharField(
                                choices=[
                                    ("isnull", "is empty"),
                                    ("notnull", "is not empty"),
                                    ("fillna", "fill empty values"),
                                    ("hour", "hour"),
                                    ("minute", "minute"),
                                    ("second", "second"),
                                    ("millisecond", "millisecond"),
                                ],
                                max_length=20,
                                null=True,
                            ),
                        ),
                        (
                            "datetime_function",
                            models.CharField(
                                choices=[
                                    ("isnull", "is empty"),
                                    ("notnull", "is not empty"),
                                    ("fillna", "fill empty values"),
                                    ("hour", "hour"),
                                    ("minute", "minute"),
                                    ("second", "second"),
                                    ("millisecond", "millisecond"),
                                    ("year", "year"),
                                    ("month", "month"),
                                    ("day", "day"),
                                    ("epoch_seconds", "epoch seconds"),
                                    ("time", "time"),
                                    ("date", "date"),
                                ],
                                max_length=20,
                                null=True,
                            ),
                        ),
                        (
                            "integer_value",
                            models.BigIntegerField(blank=True, null=True),
                        ),
                        ("float_value", models.FloatField(blank=True, null=True)),
                        ("string_value", models.TextField(blank=True, null=True)),
                        (
                            "label",
                            models.CharField(
                                max_length=300,
                                validators=[
                                    django.core.validators.RegexValidator(
                                        "^[a-zA-Z_][0-9a-zA-Z_]*$",
                                        "Only numbers, letters and underscores allowed.",
                                    )
                                ],
                            ),
                        ),
                        (
                            "node",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="add_columns",
                                to="nodes.node",
                            ),
                        ),
                    ],
                    options={
                        "abstract": False,
                    },
                    bases=(
                        dirtyfields.dirtyfields.DirtyFieldsMixin,
                        CloneMixin,
                        models.Model,
                    ),
                )
            ],
            # Table already exists. See catalog/migrations/0003_delete_product.py
            database_operations=[],
        ),
    ]
