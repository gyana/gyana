# Generated by Django 3.2.7 on 2021-12-09 02:52

from datetime import timedelta

from django.db import migrations, models


class Source(models.TextChoices):
    INTEGRATION = "integration", "Integration"
    WORKFLOW = "workflow", "Workflow"


class WorkflowState(models.TextChoices):
    INCOMPLETE = "incomplete", "Incomplete"
    RUNNING = "running", "Running"
    FAILED = "failed", "Failed"
    SUCCESS = "success", "Success"


class State(models.TextChoices):
    PENDING = "pending", "Pending"
    RUNNING = "running", "Running"
    FAILED = "failed", "Failed"
    SUCCESS = "success", "Success"


def has_errors(workflow):
    return workflow.nodes.exclude(error__isnull=True).exists()


def forwards(apps, schema_editor):
    Workflow = apps.get_model("workflows", "Workflow")
    JobRun = apps.get_model("runs", "JobRun")

    # to maintain backwards compatability, add an initial run

    for workflow in Workflow.objects.all():

        if workflow.last_run:
            failed = has_errors(workflow)
            JobRun.objects.create(
                workflow=workflow,
                source=Source.WORKFLOW,
                # an estimate since we didn't track this information
                started_at=workflow.last_run - timedelta(seconds=5),
                completed_at=workflow.last_run,
                state=State.SUCCESS if not failed else State.FAILED,
            )
            workflow.state = (
                WorkflowState.SUCCESS if not failed else WorkflowState.FAILED
            )
            workflow.save(update_fields=["state"])


def backwards(apps, schema_editor):
    JobRun = apps.get_model("runs", "JobRun")

    JobRun.objects.filter(source=Source.WORKFLOW).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("workflows", "0046_workflow_state"),
    ]

    operations = [migrations.operations.RunPython(forwards, reverse_code=backwards)]
