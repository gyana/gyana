# Generated by Django 4.0.8 on 2023-02-02 22:41

import apps.base.clone
import dirtyfields.dirtyfields
import django.contrib.postgres.fields
from django.db import migrations, models
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Filter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('column', models.CharField(max_length=300)),
                ('type', models.CharField(choices=[('INTEGER', 'Integer'), ('FLOAT', 'Float'), ('STRING', 'String'), ('BOOL', 'Bool'), ('TIME', 'Time'), ('DATE', 'Date'), ('DATETIME', 'Datetime'), ('STRUCT', 'Dictionary')], max_length=8)),
                ('numeric_predicate', models.CharField(choices=[('equal', 'is equal to'), ('nequal', 'is not equal to'), ('greaterthan', 'greater than'), ('greaterthanequal', 'greater than or equal to'), ('lessthan', 'less than'), ('lessthanequal', 'less than or equal'), ('isnull', 'is empty'), ('notnull', 'is not empty'), ('isin', 'is any of'), ('notin', 'is none of')], max_length=16, null=True, verbose_name='Condition')),
                ('float_value', models.FloatField(null=True, verbose_name='Value')),
                ('float_values', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), null=True, size=None, verbose_name='Value')),
                ('integer_value', models.BigIntegerField(null=True, verbose_name='Value')),
                ('integer_values', django.contrib.postgres.fields.ArrayField(base_field=models.BigIntegerField(), null=True, size=None, verbose_name='Value')),
                ('time_predicate', models.CharField(choices=[('equal', 'is'), ('nequal', 'is not'), ('lessthan', 'is before'), ('lessthanequal', 'is on or before'), ('greaterthan', 'is after'), ('greaterthanequal', 'is on or after'), ('isnull', 'is empty'), ('notnull', 'is not empty')], max_length=16, null=True, verbose_name='Condition')),
                ('datetime_predicate', models.CharField(choices=[('equal', 'is'), ('nequal', 'is not'), ('lessthan', 'is before'), ('lessthanequal', 'is on or before'), ('greaterthan', 'is after'), ('greaterthanequal', 'is on or after'), ('isnull', 'is empty'), ('notnull', 'is not empty'), ('today', 'today'), ('tomorrow', 'tomorrow'), ('yesterday', 'yesterday'), ('oneweekago', 'one week ago'), ('onemonthago', 'one month ago'), ('oneyearago', 'one year ago'), ('thisweek', 'This week (starts Monday)'), ('thisweekuptodate', 'This week (starts Monday) up to date'), ('lastweek', 'Last week (starts Monday)'), ('last7', 'Last 7 days'), ('last14', 'Last 14 days'), ('last28', 'Last 28 days'), ('thismonth', 'This month'), ('thismonthuptodate', 'This month to date'), ('lastmonth', 'Last month'), ('last30', 'Last 30 days'), ('last90', 'Last 90 days'), ('thisquarter', 'This quarter'), ('thisquarteruptodate', 'This quarter up to date'), ('lastquarter', 'Last quarter'), ('last180', 'Last 180 days'), ('last12month', 'Last 12 months'), ('lastfull12month', 'Last full 12 months until today'), ('lastyear', 'Last calendar year'), ('thisyear', 'This year'), ('thisyearuptodate', 'This year (January - up to date)')], max_length=20, null=True, verbose_name='Condition')),
                ('time_value', models.TimeField(null=True, verbose_name='Value')),
                ('date_value', models.DateField(null=True, verbose_name='Value')),
                ('datetime_value', models.DateTimeField(null=True, verbose_name='Value')),
                ('string_predicate', models.CharField(choices=[('equal', 'is equal to'), ('nequal', 'is not equal to'), ('contains', 'contains'), ('notcontains', 'does not contain'), ('startswith', 'starts with'), ('endswith', 'ends with'), ('isnull', 'is empty'), ('notnull', 'is not empty'), ('isin', 'is any of'), ('notin', 'is none of'), ('isupper', 'is uppercase'), ('islower', 'is lowercase')], max_length=16, null=True, verbose_name='Condition')),
                ('string_value', models.TextField(null=True, verbose_name='Value')),
                ('string_values', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), null=True, size=None, verbose_name='Value')),
                ('bool_predicate', models.CharField(choices=[('isnull', 'is empty'), ('notnull', 'is not empty'), ('istrue', 'is true'), ('isfalse', 'is false')], default='istrue', max_length=16, verbose_name='Condition')),
                ('struct_predicate', models.CharField(choices=[('isnull', 'is empty'), ('notnull', 'is not empty')], max_length=16, null=True, verbose_name='Condition')),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, apps.base.clone.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalFilter',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created', models.DateTimeField(blank=True, editable=False)),
                ('updated', models.DateTimeField(blank=True, editable=False)),
                ('column', models.CharField(max_length=300)),
                ('type', models.CharField(choices=[('INTEGER', 'Integer'), ('FLOAT', 'Float'), ('STRING', 'String'), ('BOOL', 'Bool'), ('TIME', 'Time'), ('DATE', 'Date'), ('DATETIME', 'Datetime'), ('STRUCT', 'Dictionary')], max_length=8)),
                ('numeric_predicate', models.CharField(choices=[('equal', 'is equal to'), ('nequal', 'is not equal to'), ('greaterthan', 'greater than'), ('greaterthanequal', 'greater than or equal to'), ('lessthan', 'less than'), ('lessthanequal', 'less than or equal'), ('isnull', 'is empty'), ('notnull', 'is not empty'), ('isin', 'is any of'), ('notin', 'is none of')], max_length=16, null=True, verbose_name='Condition')),
                ('float_value', models.FloatField(null=True, verbose_name='Value')),
                ('float_values', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), null=True, size=None, verbose_name='Value')),
                ('integer_value', models.BigIntegerField(null=True, verbose_name='Value')),
                ('integer_values', django.contrib.postgres.fields.ArrayField(base_field=models.BigIntegerField(), null=True, size=None, verbose_name='Value')),
                ('time_predicate', models.CharField(choices=[('equal', 'is'), ('nequal', 'is not'), ('lessthan', 'is before'), ('lessthanequal', 'is on or before'), ('greaterthan', 'is after'), ('greaterthanequal', 'is on or after'), ('isnull', 'is empty'), ('notnull', 'is not empty')], max_length=16, null=True, verbose_name='Condition')),
                ('datetime_predicate', models.CharField(choices=[('equal', 'is'), ('nequal', 'is not'), ('lessthan', 'is before'), ('lessthanequal', 'is on or before'), ('greaterthan', 'is after'), ('greaterthanequal', 'is on or after'), ('isnull', 'is empty'), ('notnull', 'is not empty'), ('today', 'today'), ('tomorrow', 'tomorrow'), ('yesterday', 'yesterday'), ('oneweekago', 'one week ago'), ('onemonthago', 'one month ago'), ('oneyearago', 'one year ago'), ('thisweek', 'This week (starts Monday)'), ('thisweekuptodate', 'This week (starts Monday) up to date'), ('lastweek', 'Last week (starts Monday)'), ('last7', 'Last 7 days'), ('last14', 'Last 14 days'), ('last28', 'Last 28 days'), ('thismonth', 'This month'), ('thismonthuptodate', 'This month to date'), ('lastmonth', 'Last month'), ('last30', 'Last 30 days'), ('last90', 'Last 90 days'), ('thisquarter', 'This quarter'), ('thisquarteruptodate', 'This quarter up to date'), ('lastquarter', 'Last quarter'), ('last180', 'Last 180 days'), ('last12month', 'Last 12 months'), ('lastfull12month', 'Last full 12 months until today'), ('lastyear', 'Last calendar year'), ('thisyear', 'This year'), ('thisyearuptodate', 'This year (January - up to date)')], max_length=20, null=True, verbose_name='Condition')),
                ('time_value', models.TimeField(null=True, verbose_name='Value')),
                ('date_value', models.DateField(null=True, verbose_name='Value')),
                ('datetime_value', models.DateTimeField(null=True, verbose_name='Value')),
                ('string_predicate', models.CharField(choices=[('equal', 'is equal to'), ('nequal', 'is not equal to'), ('contains', 'contains'), ('notcontains', 'does not contain'), ('startswith', 'starts with'), ('endswith', 'ends with'), ('isnull', 'is empty'), ('notnull', 'is not empty'), ('isin', 'is any of'), ('notin', 'is none of'), ('isupper', 'is uppercase'), ('islower', 'is lowercase')], max_length=16, null=True, verbose_name='Condition')),
                ('string_value', models.TextField(null=True, verbose_name='Value')),
                ('string_values', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), null=True, size=None, verbose_name='Value')),
                ('bool_predicate', models.CharField(choices=[('isnull', 'is empty'), ('notnull', 'is not empty'), ('istrue', 'is true'), ('isfalse', 'is false')], default='istrue', max_length=16, verbose_name='Condition')),
                ('struct_predicate', models.CharField(choices=[('isnull', 'is empty'), ('notnull', 'is not empty')], max_length=16, null=True, verbose_name='Condition')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical filter',
                'verbose_name_plural': 'historical filters',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
