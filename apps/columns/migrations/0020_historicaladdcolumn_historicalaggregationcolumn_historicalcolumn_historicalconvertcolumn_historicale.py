# Generated by Django 3.2.11 on 2022-03-07 12:41

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    dependencies = [
        ('nodes', '0024_auto_20220208_1407'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('widgets', '0054_historicalcombinationchart'),
        ('columns', '0019_auto_20220221_1148'),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalWindowColumn',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created', models.DateTimeField(blank=True, editable=False)),
                ('updated', models.DateTimeField(blank=True, editable=False)),
                ('column', models.CharField(help_text='Choose an aggregation column', max_length=300)),
                ('function', models.CharField(choices=[('sum', 'Sum'), ('count', 'Count'), ('nunique', 'Count distinct'), ('mean', 'Average'), ('max', 'Maximum'), ('min', 'Minimum'), ('std', 'Standard deviation')], help_text='Select an aggregation function', max_length=20)),
                ('group_by', models.CharField(blank=True, help_text='Group over this column', max_length=300, null=True)),
                ('order_by', models.CharField(blank=True, help_text='Order by this column', max_length=300, null=True)),
                ('ascending', models.BooleanField(default=True, help_text='Select to sort ascendingly')),
                ('label', models.CharField(help_text='Select a new column name', max_length=300, validators=[django.core.validators.RegexValidator('^[a-zA-Z_][0-9a-zA-Z_]*$', 'Only numbers, letters and underscores allowed.')])),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('node', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='nodes.node')),
            ],
            options={
                'verbose_name': 'historical window column',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSortColumn',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created', models.DateTimeField(blank=True, editable=False)),
                ('updated', models.DateTimeField(blank=True, editable=False)),
                ('ascending', models.BooleanField(default=True, help_text='Ascending Sort')),
                ('column', models.CharField(max_length=300)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('node', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='nodes.node')),
            ],
            options={
                'verbose_name': 'historical sort column',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSecondaryColumn',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created', models.DateTimeField(blank=True, editable=False)),
                ('updated', models.DateTimeField(blank=True, editable=False)),
                ('column', models.CharField(max_length=300)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('node', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='nodes.node')),
            ],
            options={
                'verbose_name': 'historical secondary column',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalRenameColumn',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created', models.DateTimeField(blank=True, editable=False)),
                ('updated', models.DateTimeField(blank=True, editable=False)),
                ('column', models.CharField(max_length=300, verbose_name='Old column name')),
                ('new_name', models.CharField(max_length=300, validators=[django.core.validators.RegexValidator('^[a-zA-Z_][0-9a-zA-Z_]*$', 'Only numbers, letters and underscores allowed.')], verbose_name='New column name')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('node', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='nodes.node')),
            ],
            options={
                'verbose_name': 'historical rename column',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalJoinColumn',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created', models.DateTimeField(blank=True, editable=False)),
                ('updated', models.DateTimeField(blank=True, editable=False)),
                ('how', models.CharField(choices=[('inner', 'Inner'), ('outer', 'Outer'), ('left', 'Left'), ('right', 'Right')], default='inner', help_text='Select the join method, more information in the docs', max_length=12)),
                ('left_index', models.IntegerField(default=0)),
                ('left_column', models.CharField(help_text='Choose the join column from Input {}', max_length=300)),
                ('right_column', models.CharField(help_text='Choose the right join column from Input {}', max_length=300)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('node', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='nodes.node')),
            ],
            options={
                'verbose_name': 'historical join column',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalFormulaColumn',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created', models.DateTimeField(blank=True, editable=False)),
                ('updated', models.DateTimeField(blank=True, editable=False)),
                ('formula', models.TextField(help_text='Type formula', null=True)),
                ('label', models.CharField(help_text='New column name', max_length=300, validators=[django.core.validators.RegexValidator('^[a-zA-Z_][0-9a-zA-Z_]*$', 'Only numbers, letters and underscores allowed.')])),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('node', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='nodes.node')),
            ],
            options={
                'verbose_name': 'historical formula column',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalEditColumn',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created', models.DateTimeField(blank=True, editable=False)),
                ('updated', models.DateTimeField(blank=True, editable=False)),
                ('column', models.CharField(max_length=300)),
                ('string_function', models.CharField(choices=[('isnull', 'is empty'), ('notnull', 'is not empty'), ('fillna', 'fill empty values'), ('lower', 'to lowercase'), ('upper', 'to uppercase'), ('length', 'length'), ('reverse', 'reverse'), ('strip', 'strip'), ('lstrip', 'lstrip'), ('rstrip', 'rstrip'), ('like', 'like'), ('contains', 'contains')], max_length=20, null=True, verbose_name='Operation')),
                ('integer_function', models.CharField(choices=[('isnull', 'is empty'), ('notnull', 'is not empty'), ('cummax', 'cummax'), ('cummin', 'cummin'), ('abs', 'absolute value'), ('sqrt', 'square root'), ('ceil', 'ceiling'), ('floor', 'floor'), ('ln', 'ln'), ('log2', 'log2'), ('log10', 'log10'), ('log', 'log'), ('exp', 'exponent'), ('add', 'add'), ('sub', 'subtract'), ('mul', 'multiply'), ('div', 'divide')], max_length=20, null=True, verbose_name='Operation')),
                ('date_function', models.CharField(choices=[('isnull', 'is empty'), ('notnull', 'is not empty'), ('year', 'year'), ('month', 'month'), ('day', 'day')], max_length=20, null=True, verbose_name='Operation')),
                ('time_function', models.CharField(choices=[('isnull', 'is empty'), ('notnull', 'is not empty'), ('hour', 'hour'), ('minute', 'minute'), ('second', 'second'), ('millisecond', 'millisecond')], max_length=20, null=True, verbose_name='Operation')),
                ('datetime_function', models.CharField(choices=[('isnull', 'is empty'), ('notnull', 'is not empty'), ('hour', 'hour'), ('minute', 'minute'), ('second', 'second'), ('millisecond', 'millisecond'), ('year', 'year'), ('month', 'month'), ('day', 'day'), ('epoch_seconds', 'epoch seconds'), ('time', 'time'), ('date', 'date')], max_length=20, null=True, verbose_name='Operation')),
                ('boolean_function', models.CharField(choices=[('isnull', 'is empty'), ('notnull', 'is not empty')], max_length=20, null=True, verbose_name='Operation')),
                ('integer_value', models.BigIntegerField(null=True, verbose_name='Value')),
                ('float_value', models.FloatField(null=True, verbose_name='Value')),
                ('string_value', models.TextField(null=True, verbose_name='Value')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('node', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='nodes.node')),
            ],
            options={
                'verbose_name': 'historical edit column',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalConvertColumn',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created', models.DateTimeField(blank=True, editable=False)),
                ('updated', models.DateTimeField(blank=True, editable=False)),
                ('column', models.CharField(help_text='Select column', max_length=300)),
                ('target_type', models.CharField(choices=[('text', 'Text'), ('int', 'Integer'), ('float', 'Decimal'), ('bool', 'Bool'), ('date', 'Date'), ('time', 'Time'), ('timestamp', 'Datetime')], help_text='Select type to convert to', max_length=16)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('node', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='nodes.node')),
            ],
            options={
                'verbose_name': 'historical convert column',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalColumn',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created', models.DateTimeField(blank=True, editable=False)),
                ('updated', models.DateTimeField(blank=True, editable=False)),
                ('name', models.CharField(blank=True, help_text='Set column header name', max_length=64, null=True)),
                ('rounding', models.IntegerField(default=2, help_text='Decimal point to round to')),
                ('currency', models.CharField(blank=True, choices=[('AED', 'AED - د.إ'), ('AFN', 'AFN - ؋'), ('ALL', 'ALL - L'), ('AMD', 'AMD - ֏'), ('ANG', 'ANG - ƒ'), ('AOA', 'AOA - Kz'), ('ARS', 'ARS - $'), ('AUD', 'AUD - $'), ('AWG', 'AWG - ƒ'), ('AZN', 'AZN - ₼'), ('BAM', 'BAM - KM'), ('BBD', 'BBD - $'), ('BDT', 'BDT - ৳'), ('BGN', 'BGN - лв'), ('BHD', 'BHD - .د.ب'), ('BIF', 'BIF - FBu'), ('BMD', 'BMD - $'), ('BND', 'BND - $'), ('BOB', 'BOB - $b'), ('BRL', 'BRL - R$'), ('BSD', 'BSD - $'), ('BTC', 'BTC - ฿'), ('BTN', 'BTN - Nu.'), ('BWP', 'BWP - P'), ('BYR', 'BYR - Br'), ('BYN', 'BYN - Br'), ('BZD', 'BZD - BZ$'), ('CAD', 'CAD - $'), ('CDF', 'CDF - FC'), ('CHF', 'CHF - CHF'), ('CLP', 'CLP - $'), ('CNY', 'CNY - ¥'), ('COP', 'COP - $'), ('CRC', 'CRC - ₡'), ('CUC', 'CUC - $'), ('CUP', 'CUP - ₱'), ('CVE', 'CVE - $'), ('CZK', 'CZK - Kč'), ('DJF', 'DJF - Fdj'), ('DKK', 'DKK - kr'), ('DOP', 'DOP - RD$'), ('DZD', 'DZD - دج'), ('EEK', 'EEK - kr'), ('EGP', 'EGP - £'), ('ERN', 'ERN - Nfk'), ('ETB', 'ETB - Br'), ('ETH', 'ETH - Ξ'), ('EUR', 'EUR - €'), ('FJD', 'FJD - $'), ('FKP', 'FKP - £'), ('GBP', 'GBP - £'), ('GEL', 'GEL - ₾'), ('GGP', 'GGP - £'), ('GHC', 'GHC - ₵'), ('GHS', 'GHS - GH₵'), ('GIP', 'GIP - £'), ('GMD', 'GMD - D'), ('GNF', 'GNF - FG'), ('GTQ', 'GTQ - Q'), ('GYD', 'GYD - $'), ('HKD', 'HKD - $'), ('HNL', 'HNL - L'), ('HRK', 'HRK - kn'), ('HTG', 'HTG - G'), ('HUF', 'HUF - Ft'), ('IDR', 'IDR - Rp'), ('ILS', 'ILS - ₪'), ('IMP', 'IMP - £'), ('INR', 'INR - ₹'), ('IQD', 'IQD - ع.د'), ('IRR', 'IRR - ﷼'), ('ISK', 'ISK - kr'), ('JEP', 'JEP - £'), ('JMD', 'JMD - J$'), ('JOD', 'JOD - JD'), ('JPY', 'JPY - ¥'), ('KES', 'KES - KSh'), ('KGS', 'KGS - лв'), ('KHR', 'KHR - ៛'), ('KMF', 'KMF - CF'), ('KPW', 'KPW - ₩'), ('KRW', 'KRW - ₩'), ('KWD', 'KWD - KD'), ('KYD', 'KYD - $'), ('KZT', 'KZT - лв'), ('LAK', 'LAK - ₭'), ('LBP', 'LBP - £'), ('LKR', 'LKR - ₨'), ('LRD', 'LRD - $'), ('LSL', 'LSL - M'), ('LTC', 'LTC - Ł'), ('LTL', 'LTL - Lt'), ('LVL', 'LVL - Ls'), ('LYD', 'LYD - LD'), ('MAD', 'MAD - MAD'), ('MDL', 'MDL - lei'), ('MGA', 'MGA - Ar'), ('MKD', 'MKD - ден'), ('MMK', 'MMK - K'), ('MNT', 'MNT - ₮'), ('MOP', 'MOP - MOP$'), ('MRO', 'MRO - UM'), ('MRU', 'MRU - UM'), ('MUR', 'MUR - ₨'), ('MVR', 'MVR - Rf'), ('MWK', 'MWK - MK'), ('MXN', 'MXN - $'), ('MYR', 'MYR - RM'), ('MZN', 'MZN - MT'), ('NAD', 'NAD - $'), ('NGN', 'NGN - ₦'), ('NIO', 'NIO - C$'), ('NOK', 'NOK - kr'), ('NPR', 'NPR - ₨'), ('NZD', 'NZD - $'), ('OMR', 'OMR - ﷼'), ('PAB', 'PAB - B/.'), ('PEN', 'PEN - S/.'), ('PGK', 'PGK - K'), ('PHP', 'PHP - ₱'), ('PKR', 'PKR - ₨'), ('PLN', 'PLN - zł'), ('PYG', 'PYG - Gs'), ('QAR', 'QAR - ﷼'), ('RMB', 'RMB - ￥'), ('RON', 'RON - lei'), ('RSD', 'RSD - Дин.'), ('RUB', 'RUB - ₽'), ('RWF', 'RWF - R₣'), ('SAR', 'SAR - ﷼'), ('SBD', 'SBD - $'), ('SCR', 'SCR - ₨'), ('SDG', 'SDG - ج.س.'), ('SEK', 'SEK - kr'), ('SGD', 'SGD - $'), ('SHP', 'SHP - £'), ('SLL', 'SLL - Le'), ('SOS', 'SOS - S'), ('SRD', 'SRD - $'), ('SSP', 'SSP - £'), ('STD', 'STD - Db'), ('STN', 'STN - Db'), ('SVC', 'SVC - $'), ('SYP', 'SYP - £'), ('SZL', 'SZL - E'), ('THB', 'THB - ฿'), ('TJS', 'TJS - SM'), ('TMT', 'TMT - T'), ('TND', 'TND - د.ت'), ('TOP', 'TOP - T$'), ('TRL', 'TRL - ₤'), ('TRY', 'TRY - ₺'), ('TTD', 'TTD - TT$'), ('TVD', 'TVD - $'), ('TWD', 'TWD - NT$'), ('TZS', 'TZS - TSh'), ('UAH', 'UAH - ₴'), ('UGX', 'UGX - USh'), ('USD', 'USD - $'), ('UYU', 'UYU - $U'), ('UZS', 'UZS - лв'), ('VEF', 'VEF - Bs'), ('VND', 'VND - ₫'), ('VUV', 'VUV - VT'), ('WST', 'WST - WS$'), ('XAF', 'XAF - FCFA'), ('XBT', 'XBT - Ƀ'), ('XCD', 'XCD - $'), ('XOF', 'XOF - CFA'), ('XPF', 'XPF - ₣'), ('YER', 'YER - ﷼'), ('ZAR', 'ZAR - R'), ('ZWD', 'ZWD - Z$')], help_text='Select a currency', max_length=32, null=True)),
                ('is_percentage', models.BooleanField(blank=True, default=False, verbose_name='Show in %')),
                ('column', models.CharField(help_text='Select columns', max_length=300)),
                ('part', models.CharField(blank=True, choices=[('date', 'Date'), ('week', 'Week with year'), ('month', 'Month with year'), ('monthonly', 'Month without year'), ('year', 'Year'), ('quarter', 'Quarter with year')], help_text='Select the desired date part', max_length=16, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('node', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='nodes.node')),
                ('widget', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='widgets.widget')),
            ],
            options={
                'verbose_name': 'historical column',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAggregationColumn',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created', models.DateTimeField(blank=True, editable=False)),
                ('updated', models.DateTimeField(blank=True, editable=False)),
                ('name', models.CharField(blank=True, help_text='Set column header name', max_length=64, null=True)),
                ('rounding', models.IntegerField(default=2, help_text='Decimal point to round to')),
                ('currency', models.CharField(blank=True, choices=[('AED', 'AED - د.إ'), ('AFN', 'AFN - ؋'), ('ALL', 'ALL - L'), ('AMD', 'AMD - ֏'), ('ANG', 'ANG - ƒ'), ('AOA', 'AOA - Kz'), ('ARS', 'ARS - $'), ('AUD', 'AUD - $'), ('AWG', 'AWG - ƒ'), ('AZN', 'AZN - ₼'), ('BAM', 'BAM - KM'), ('BBD', 'BBD - $'), ('BDT', 'BDT - ৳'), ('BGN', 'BGN - лв'), ('BHD', 'BHD - .د.ب'), ('BIF', 'BIF - FBu'), ('BMD', 'BMD - $'), ('BND', 'BND - $'), ('BOB', 'BOB - $b'), ('BRL', 'BRL - R$'), ('BSD', 'BSD - $'), ('BTC', 'BTC - ฿'), ('BTN', 'BTN - Nu.'), ('BWP', 'BWP - P'), ('BYR', 'BYR - Br'), ('BYN', 'BYN - Br'), ('BZD', 'BZD - BZ$'), ('CAD', 'CAD - $'), ('CDF', 'CDF - FC'), ('CHF', 'CHF - CHF'), ('CLP', 'CLP - $'), ('CNY', 'CNY - ¥'), ('COP', 'COP - $'), ('CRC', 'CRC - ₡'), ('CUC', 'CUC - $'), ('CUP', 'CUP - ₱'), ('CVE', 'CVE - $'), ('CZK', 'CZK - Kč'), ('DJF', 'DJF - Fdj'), ('DKK', 'DKK - kr'), ('DOP', 'DOP - RD$'), ('DZD', 'DZD - دج'), ('EEK', 'EEK - kr'), ('EGP', 'EGP - £'), ('ERN', 'ERN - Nfk'), ('ETB', 'ETB - Br'), ('ETH', 'ETH - Ξ'), ('EUR', 'EUR - €'), ('FJD', 'FJD - $'), ('FKP', 'FKP - £'), ('GBP', 'GBP - £'), ('GEL', 'GEL - ₾'), ('GGP', 'GGP - £'), ('GHC', 'GHC - ₵'), ('GHS', 'GHS - GH₵'), ('GIP', 'GIP - £'), ('GMD', 'GMD - D'), ('GNF', 'GNF - FG'), ('GTQ', 'GTQ - Q'), ('GYD', 'GYD - $'), ('HKD', 'HKD - $'), ('HNL', 'HNL - L'), ('HRK', 'HRK - kn'), ('HTG', 'HTG - G'), ('HUF', 'HUF - Ft'), ('IDR', 'IDR - Rp'), ('ILS', 'ILS - ₪'), ('IMP', 'IMP - £'), ('INR', 'INR - ₹'), ('IQD', 'IQD - ع.د'), ('IRR', 'IRR - ﷼'), ('ISK', 'ISK - kr'), ('JEP', 'JEP - £'), ('JMD', 'JMD - J$'), ('JOD', 'JOD - JD'), ('JPY', 'JPY - ¥'), ('KES', 'KES - KSh'), ('KGS', 'KGS - лв'), ('KHR', 'KHR - ៛'), ('KMF', 'KMF - CF'), ('KPW', 'KPW - ₩'), ('KRW', 'KRW - ₩'), ('KWD', 'KWD - KD'), ('KYD', 'KYD - $'), ('KZT', 'KZT - лв'), ('LAK', 'LAK - ₭'), ('LBP', 'LBP - £'), ('LKR', 'LKR - ₨'), ('LRD', 'LRD - $'), ('LSL', 'LSL - M'), ('LTC', 'LTC - Ł'), ('LTL', 'LTL - Lt'), ('LVL', 'LVL - Ls'), ('LYD', 'LYD - LD'), ('MAD', 'MAD - MAD'), ('MDL', 'MDL - lei'), ('MGA', 'MGA - Ar'), ('MKD', 'MKD - ден'), ('MMK', 'MMK - K'), ('MNT', 'MNT - ₮'), ('MOP', 'MOP - MOP$'), ('MRO', 'MRO - UM'), ('MRU', 'MRU - UM'), ('MUR', 'MUR - ₨'), ('MVR', 'MVR - Rf'), ('MWK', 'MWK - MK'), ('MXN', 'MXN - $'), ('MYR', 'MYR - RM'), ('MZN', 'MZN - MT'), ('NAD', 'NAD - $'), ('NGN', 'NGN - ₦'), ('NIO', 'NIO - C$'), ('NOK', 'NOK - kr'), ('NPR', 'NPR - ₨'), ('NZD', 'NZD - $'), ('OMR', 'OMR - ﷼'), ('PAB', 'PAB - B/.'), ('PEN', 'PEN - S/.'), ('PGK', 'PGK - K'), ('PHP', 'PHP - ₱'), ('PKR', 'PKR - ₨'), ('PLN', 'PLN - zł'), ('PYG', 'PYG - Gs'), ('QAR', 'QAR - ﷼'), ('RMB', 'RMB - ￥'), ('RON', 'RON - lei'), ('RSD', 'RSD - Дин.'), ('RUB', 'RUB - ₽'), ('RWF', 'RWF - R₣'), ('SAR', 'SAR - ﷼'), ('SBD', 'SBD - $'), ('SCR', 'SCR - ₨'), ('SDG', 'SDG - ج.س.'), ('SEK', 'SEK - kr'), ('SGD', 'SGD - $'), ('SHP', 'SHP - £'), ('SLL', 'SLL - Le'), ('SOS', 'SOS - S'), ('SRD', 'SRD - $'), ('SSP', 'SSP - £'), ('STD', 'STD - Db'), ('STN', 'STN - Db'), ('SVC', 'SVC - $'), ('SYP', 'SYP - £'), ('SZL', 'SZL - E'), ('THB', 'THB - ฿'), ('TJS', 'TJS - SM'), ('TMT', 'TMT - T'), ('TND', 'TND - د.ت'), ('TOP', 'TOP - T$'), ('TRL', 'TRL - ₤'), ('TRY', 'TRY - ₺'), ('TTD', 'TTD - TT$'), ('TVD', 'TVD - $'), ('TWD', 'TWD - NT$'), ('TZS', 'TZS - TSh'), ('UAH', 'UAH - ₴'), ('UGX', 'UGX - USh'), ('USD', 'USD - $'), ('UYU', 'UYU - $U'), ('UZS', 'UZS - лв'), ('VEF', 'VEF - Bs'), ('VND', 'VND - ₫'), ('VUV', 'VUV - VT'), ('WST', 'WST - WS$'), ('XAF', 'XAF - FCFA'), ('XBT', 'XBT - Ƀ'), ('XCD', 'XCD - $'), ('XOF', 'XOF - CFA'), ('XPF', 'XPF - ₣'), ('YER', 'YER - ﷼'), ('ZAR', 'ZAR - R'), ('ZWD', 'ZWD - Z$')], help_text='Select a currency', max_length=32, null=True)),
                ('is_percentage', models.BooleanField(blank=True, default=False, verbose_name='Show in %')),
                ('column', models.CharField(max_length=300)),
                ('function', models.CharField(choices=[('sum', 'Sum'), ('count', 'Count'), ('nunique', 'Count distinct'), ('mean', 'Average'), ('max', 'Maximum'), ('min', 'Minimum'), ('std', 'Standard deviation')], max_length=20)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('node', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='nodes.node')),
                ('widget', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='widgets.widget')),
            ],
            options={
                'verbose_name': 'historical aggregation column',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAddColumn',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created', models.DateTimeField(blank=True, editable=False)),
                ('updated', models.DateTimeField(blank=True, editable=False)),
                ('column', models.CharField(max_length=300)),
                ('string_function', models.CharField(choices=[('isnull', 'is empty'), ('notnull', 'is not empty'), ('fillna', 'fill empty values'), ('lower', 'to lowercase'), ('upper', 'to uppercase'), ('length', 'length'), ('reverse', 'reverse'), ('strip', 'strip'), ('lstrip', 'lstrip'), ('rstrip', 'rstrip'), ('like', 'like'), ('contains', 'contains')], max_length=20, null=True, verbose_name='Operation')),
                ('integer_function', models.CharField(choices=[('isnull', 'is empty'), ('notnull', 'is not empty'), ('cummax', 'cummax'), ('cummin', 'cummin'), ('abs', 'absolute value'), ('sqrt', 'square root'), ('ceil', 'ceiling'), ('floor', 'floor'), ('ln', 'ln'), ('log2', 'log2'), ('log10', 'log10'), ('log', 'log'), ('exp', 'exponent'), ('add', 'add'), ('sub', 'subtract'), ('mul', 'multiply'), ('div', 'divide')], max_length=20, null=True, verbose_name='Operation')),
                ('date_function', models.CharField(choices=[('isnull', 'is empty'), ('notnull', 'is not empty'), ('year', 'year'), ('month', 'month'), ('day', 'day')], max_length=20, null=True, verbose_name='Operation')),
                ('time_function', models.CharField(choices=[('isnull', 'is empty'), ('notnull', 'is not empty'), ('hour', 'hour'), ('minute', 'minute'), ('second', 'second'), ('millisecond', 'millisecond')], max_length=20, null=True, verbose_name='Operation')),
                ('datetime_function', models.CharField(choices=[('isnull', 'is empty'), ('notnull', 'is not empty'), ('hour', 'hour'), ('minute', 'minute'), ('second', 'second'), ('millisecond', 'millisecond'), ('year', 'year'), ('month', 'month'), ('day', 'day'), ('epoch_seconds', 'epoch seconds'), ('time', 'time'), ('date', 'date')], max_length=20, null=True, verbose_name='Operation')),
                ('boolean_function', models.CharField(choices=[('isnull', 'is empty'), ('notnull', 'is not empty')], max_length=20, null=True, verbose_name='Operation')),
                ('integer_value', models.BigIntegerField(null=True, verbose_name='Value')),
                ('float_value', models.FloatField(null=True, verbose_name='Value')),
                ('string_value', models.TextField(null=True, verbose_name='Value')),
                ('label', models.CharField(max_length=300, validators=[django.core.validators.RegexValidator('^[a-zA-Z_][0-9a-zA-Z_]*$', 'Only numbers, letters and underscores allowed.')], verbose_name='New column name')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('node', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='nodes.node')),
            ],
            options={
                'verbose_name': 'historical add column',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
