# Generated by Django 4.0.8 on 2023-02-02 22:41

import apps.base.clone
import apps.base.fields
import dirtyfields.dirtyfields
from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Connector',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('fivetran_authorized', models.BooleanField(default=False)),
                ('fivetran_sync_started', models.DateTimeField(null=True)),
                ('bigquery_succeeded_at', models.DateTimeField(null=True)),
                ('fivetran_id', models.TextField(default=uuid.uuid4, unique=True)),
                ('group_id', models.TextField()),
                ('service', models.TextField(max_length=255)),
                ('service_version', models.IntegerField()),
                ('schema', models.TextField(unique=True)),
                ('paused', models.BooleanField()),
                ('pause_after_trial', models.BooleanField()),
                ('connected_by', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('succeeded_at', models.DateTimeField(null=True)),
                ('failed_at', models.DateTimeField(null=True)),
                ('sync_frequency', models.IntegerField()),
                ('daily_sync_time', models.CharField(max_length=6, null=True)),
                ('schedule_type', models.CharField(choices=[('auto', 'Auto'), ('manual', 'Manual')], max_length=8)),
                ('setup_state', models.CharField(choices=[('broken', 'Broken - the connector setup config is broken'), ('not-found', "Fivetran couldn't find this connector"), ('incomplete', 'Incomplete - the setup config is incomplete, the setup tests never succeeded'), ('connected', 'Connected - the connector is properly set up')], max_length=16)),
                ('sync_state', models.CharField(choices=[('scheduled', 'Scheduled - the sync is waiting to be run'), ('syncing', 'Syncing - the sync is currently running'), ('paused', 'Paused - the sync is currently paused'), ('rescheduled', 'Rescheduled - the sync is waiting until more API calls are available in the source service'), ('sunset', "Sunset - this connector is no longer supported and won't sync.")], max_length=16)),
                ('update_state', models.CharField(choices=[('on_schedule', 'On Schedule - the sync is running smoothly, no delays'), ('delayed', 'Delayed -  the data is delayed for a longer time than expected for the update')], max_length=16)),
                ('is_historical_sync', models.BooleanField()),
                ('tasks', models.JSONField()),
                ('warnings', models.JSONField()),
                ('config', models.JSONField()),
                ('source_sync_details', models.JSONField(null=True)),
                ('schema_config', models.JSONField(null=True)),
                ('has_import_triggered', models.BooleanField(default=False)),
                ('sync_task_id', models.UUIDField(null=True)),
                ('sync_started', models.DateTimeField(null=True)),
                ('setup_mode', models.CharField(choices=[('basic', 'Basic'), ('advanced', 'Advanced')], default='advanced', max_length=16)),
                ('basic_reports', apps.base.fields.ChoiceArrayField(base_field=models.CharField(choices=[('BASIC_AD_PERFORMANCE', 'Ad performance by day: CPC, CPM, CPP, CTR'), ('BASIC_ADSET_PERFORMANCE', 'Ad Set performance by day: CPC, CPM, CPP, CTR'), ('BASIC_CAMPAIGN_PERFORMANCE', 'Campaign performance by day: CPC, CPM, CPP, CTR')], max_length=32), default=list, size=None)),
            ],
            options={
                'ordering': ('-updated',),
                'abstract': False,
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, apps.base.clone.CloneMixin, models.Model),
        ),
    ]
