# Generated by Django 3.2.7 on 2021-11-03 17:26
from datetime import datetime

import requests
from django.conf import settings
from django.db import migrations


def _parse_fivetran_timestamp(timestamp):
    if timestamp is not None:
        return datetime.strptime(timestamp, "%Y-%m-%dT%H:%M:%S.%f%z")


def sync_updates_from_fivetran(connector):

    res = requests.get(
        f"{settings.FIVETRAN_URL}/connectors/{connector.fivetran_id}",
        headers=settings.FIVETRAN_HEADERS,
    ).json()

    if res["code"] != "Success":
        print("Unable to find connector", connector.id, connector.fivetran_id, connector.schema)
        return

    data = res["data"]

    status = data["status"]

    kwargs = {
        "fivetran_id": data["id"],
        "group_id": data["group_id"],
        "service": data["service"],
        "service_version": data["service_version"],
        "schema": data["schema"],
        "paused": data["paused"],
        "pause_after_trial": data["pause_after_trial"],
        "connected_by": data["connected_by"],
        "created_at": _parse_fivetran_timestamp(data["created_at"]),
        "succeeded_at": _parse_fivetran_timestamp(data["succeeded_at"]),
        "failed_at": _parse_fivetran_timestamp(data["failed_at"]),
        "sync_frequency": data["sync_frequency"],
        "daily_sync_time": data.get("daily_sync_time"),
        "schedule_type": data["schedule_type"],
        "setup_state": status["setup_state"],
        "sync_state": status["sync_state"],
        "update_state": status["update_state"],
        "is_historical_sync": status["is_historical_sync"],
        "tasks": status["tasks"],
        "warnings": status["warnings"],
        "config": data["config"],
        "source_sync_details": data.get("source_sync_details"),
    }

    for key, value in kwargs.items():
        setattr(connector, key, value)

    connector.save()


def forwards(apps, schema_editor):
    Connector = apps.get_model("connectors", "Connector")

    for connector in Connector.objects.all():
        sync_updates_from_fivetran(connector)


class Migration(migrations.Migration):

    dependencies = [
        ("connectors", "0008_auto_20211103_1720"),
    ]

    operations = [
        migrations.RunPython(forwards, reverse_code=migrations.RunPython.noop),
    ]
