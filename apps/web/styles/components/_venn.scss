@use 'sass:math';

// Tailwind-like Sass utilities
// https://github.com/tailwindlabs/tailwindcss/blob/master/stubs/defaultConfig.stub.js

// Tailwind style responsiveness
// https://sass-guidelin.es/#responsive-web-design-and-breakpoints
$breakpoints: (
  'sm': 640px,
  'md': 768px,
  'lg': 1024px,
  'xl': 1280px,
  '2xl': 1536px,
);

@mixin respond-to($breakpoint) {
  // Retrieves the value from the key
  $value: map-get($breakpoints, $breakpoint);

  // If the key exists in the map
  @if $value != null {
    // Prints a media query based on the value
    @media (min-width: $value) {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}

@function spacing($spacing) {
  @return math.div($spacing, 4) * 1rem;
}

$font-sizes:  (
  'xs': 0.75rem,
  'sm': 0.875rem,
  'base': 1rem,
  'lg': 1.125rem,
  'xl': 1.25rem,
  '2xl': 1.5rem,
  '3xl': 1.875rem,
  '4xl': 2.25rem,
  '5xl': 3rem,
  '6xl': 3.75rem,
  '7xl': 4.5rem,
  '8xl': 6rem,
  '9xl': 8rem,
);

$line-heights: (
  'xs': 1rem,
  'sm': 1.25rem,
  'base': 1.5rem,
  'lg': 1.75rem,
  'xl': 1.75rem,
  '2xl': 2rem,
  '3xl': 2.25rem,
  '4xl': 2.5rem,
  '5xl': 1,
  '6xl': 1,
  '7xl': 1,
  '8xl': 1,
  '9xl': 1,
);

@mixin font-size($value) {

  $font-size: map-get($font-sizes, $value);
  $line-height: map-get($line-heights, $value);

  @if $font-size == null {
    @warn "Unfortunately, no value could be retrieved from `#{$font-size}`. "
        + "Please make sure it is defined in `$font-size` map.";
  }

  @if $line-height == null {
    @warn "Unfortunately, no value could be retrieved from `#{$line-height}`. "
        + "Please make sure it is defined in `$line-height` map.";
  }

  font-size:  $font-size;
  line-height: $line-height;
}


.venn {
  position: relative;
  display: flex;
  justify-content: center;

  .venn__gyana {
    position: absolute;
    right: 0; 
    left: 0;
    top: spacing(24); 
    color: var(--c-blue); 
    @include font-size('2xl');
    text-align: center; 
    font-family: 'Caveat';
    z-index: var(--z-overlay);
    animation: fade-in 3s ease-in-out;

    @include respond-to(sm) { 
      top: spacing(28);
      @include font-size('3xl');
    }
  }

  .venn__circle {
    display: flex;
    justify-content: center; 
    align-items: center; 
    width: spacing(56); 
    height: spacing(56); 
    border-radius: 9999px; 
    border-width: 1px; 
    // --c-blue with alpha 0.25
    // Sass color functions do not work for CSS variables :(
    // https://codyhouse.co/blog/post/how-to-combine-sass-color-functions-and-css-variables
    background-color: rgba(197, 230, 251, 0.25);

    @include respond-to(sm) { 
      width: spacing(64); 
      height: spacing(64); 
    }

    &-left {
      margin-right: spacing(-16);
      animation: float-left 3s ease-in-out;
    }

    &-right {
      margin-left: spacing(-16);
      animation: float-right 3s ease-in-out;
    }
  }

  .venn__value {
    color: var(--c-gray-600); 
    @include font-size(sm);
    text-align: center; 
    width: spacing(20);

    @include respond-to(sm) { 
      @include font-size(base);
    }

    &-left {
      margin-right: spacing(32);
    }

    &-right {
      margin-left: spacing(32);
    }
  }

  .venn__label {
    margin-top: spacing(4); 
    color: var(--c-gray-400); 
    @include font-size(xs);
    text-align: center; 

    @include respond-to(sm) { 
      @include font-size(sm);
    }

    &-left {
      padding-left: spacing(12); 
    }

    &-right {
      padding-right: spacing(12); 
    }
  }
}

@keyframes float-left {
  0% {
    transform: translatex(-20%);
  }
  100% {
    transform: translatex(0);
  }
}

@keyframes float-right {
  0% {
    transform: translatex(10%);
  }
  100% {
    transform: translatex(0);
  }
}

@keyframes fade-in {
  0%, 50% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}