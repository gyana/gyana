# Sample dockerfile build for a production deploy
# See https://docs.docker.com/build/guide/multi-stage/

# Stage 1: Build the python dependencies
# Include any build time OS dependencies here.
FROM python:3.11-slim-bookworm as build-python
RUN apt update \
  # dependencies for building Python packages
  && apt install -y build-essential libpq-dev git curl libxml2 libxslt1-dev -y
COPY ./requirements /requirements
RUN pip install --upgrade pip
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /wheels \
  -r /requirements/requirements.txt \
  -r /requirements/requirements-prod.txt

# Stage 1b. Mount the secret file for defog.ai to run in production
RUN mkdir -p /secrets
COPY .keys/keyfile.json /secrets/keyfile.json

# Stage 2: Build the front end files
FROM node:16-bookworm-slim AS build-node

# force install NPM version 16 and install
# RUN curl -sL https://deb.nodesource.com/setup_16.x | bash -
# RUN apt install -y nodejs

# copy code files
WORKDIR /code
COPY . /code
# build front end files
RUN npm install npm@8.19.2 -g
RUN npm install
RUN npm run build

# Stage 3: Build the final image
# This copies the python dependencies from the first stage
# and the front end files from the second stage.
# Add any runtime OS dependencies here.
FROM python:3.11-slim-bookworm
ENV PYTHONUNBUFFERED 1
ENV DEBUG 0
ENV HOST 0.0.0.0

RUN apt update \
  && apt install -yqq \
  curl git \
  # psycopg2 dependencies
  libpq-dev \
  # Translations dependencies
  gettext \
  # cleaning up unused files
  && apt purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \
  && rm -rf /var/lib/apt/lists/*

RUN addgroup --system django \
  && adduser --system --ingroup django django

COPY --from=build-node /code/static /code/static
COPY --from=build-python /wheels /wheels
COPY ./requirements /requirements
RUN pip install --no-index --find-links=/wheels \
  -r /requirements/requirements.txt \
  -r /requirements/requirements-prod.txt \
  && rm -rf /wheels \
  && rm -rf /root/.cache/pip/*

WORKDIR /code

COPY --chown=django:django . /code

# why this has to be here:
# https://stackoverflow.com/questions/59719175/where-to-run-collectstatic-when-deploying-django-app-to-heroku-using-docker
RUN DEBUG=False python /code/manage.py collectstatic --noinput --settings=gyana.settings.production
RUN chown django:django -R static_root

USER django

COPY --chown=django:django deploy/docker_startup.sh /start
RUN chmod +x /start

EXPOSE $PORT

CMD /start